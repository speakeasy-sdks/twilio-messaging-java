/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package circl_dev.twilio_messaging.models.shared;

import circl_dev.twilio_messaging.utils.DateTimeDeserializer;
import circl_dev.twilio_messaging.utils.DateTimeSerializer;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;

/**
 * MessagingV1DomainCertV4 - OK
 */

public class MessagingV1DomainCertV4 {
    /**
     * Optional JSON field describing the status and upload date of a new certificate in the process of validation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cert_in_validation")
    public Object certInValidation;

    public MessagingV1DomainCertV4 withCertInValidation(Object certInValidation) {
        this.certInValidation = certInValidation;
        return this;
    }
    
    /**
     * The unique string that we created to identify this Certificate resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificate_sid")
    public String certificateSid;

    public MessagingV1DomainCertV4 withCertificateSid(String certificateSid) {
        this.certificateSid = certificateSid;
        return this;
    }
    
    /**
     * Date that this Domain was registered to the Twilio platform to create a new Domain object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_created")
    public OffsetDateTime dateCreated;

    public MessagingV1DomainCertV4 withDateCreated(OffsetDateTime dateCreated) {
        this.dateCreated = dateCreated;
        return this;
    }
    
    /**
     * Date that the private certificate associated with this domain expires. You will need to update the certificate before that date to ensure your shortened links will continue to work.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_expires")
    public OffsetDateTime dateExpires;

    public MessagingV1DomainCertV4 withDateExpires(OffsetDateTime dateExpires) {
        this.dateExpires = dateExpires;
        return this;
    }
    
    /**
     * Date that this Domain was last updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_updated")
    public OffsetDateTime dateUpdated;

    public MessagingV1DomainCertV4 withDateUpdated(OffsetDateTime dateUpdated) {
        this.dateUpdated = dateUpdated;
        return this;
    }
    
    /**
     * Full url path for this domain.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain_name")
    public String domainName;

    public MessagingV1DomainCertV4 withDomainName(String domainName) {
        this.domainName = domainName;
        return this;
    }
    
    /**
     * The unique string that we created to identify the Domain resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain_sid")
    public String domainSid;

    public MessagingV1DomainCertV4 withDomainSid(String domainSid) {
        this.domainSid = domainSid;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public MessagingV1DomainCertV4 withUrl(String url) {
        this.url = url;
        return this;
    }
    
    public MessagingV1DomainCertV4(){}
}
