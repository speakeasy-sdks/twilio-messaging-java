/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package circl_dev.twilio_messaging.models.shared;

import circl_dev.twilio_messaging.utils.DateTimeDeserializer;
import circl_dev.twilio_messaging.utils.DateTimeSerializer;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;

/**
 * MessagingV1BrandRegistrations - Created
 */

public class MessagingV1BrandRegistrations {
    /**
     * A2P Messaging Profile Bundle BundleSid.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("a2p_profile_bundle_sid")
    public String a2pProfileBundleSid;

    public MessagingV1BrandRegistrations withA2pProfileBundleSid(String a2pProfileBundleSid) {
        this.a2pProfileBundleSid = a2pProfileBundleSid;
        return this;
    }
    
    /**
     * The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Brand Registration resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_sid")
    public String accountSid;

    public MessagingV1BrandRegistrations withAccountSid(String accountSid) {
        this.accountSid = accountSid;
        return this;
    }
    
    /**
     * Feedback on how to improve brand score
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("brand_feedback")
    public BrandRegistrationsEnumBrandFeedback[] brandFeedback;

    public MessagingV1BrandRegistrations withBrandFeedback(BrandRegistrationsEnumBrandFeedback[] brandFeedback) {
        this.brandFeedback = brandFeedback;
        return this;
    }
    
    /**
     * The secondary vetting score if it was done. Otherwise, it will be the brand score if it's returned from TCR. It may be null if no score is available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("brand_score")
    public Long brandScore;

    public MessagingV1BrandRegistrations withBrandScore(Long brandScore) {
        this.brandScore = brandScore;
        return this;
    }
    
    /**
     * Type of brand. One of: "STANDARD", "SOLE_PROPRIETOR". SOLE_PROPRIETOR is for the low volume, SOLE_PROPRIETOR campaign use case. There can only be one SOLE_PROPRIETOR campaign created per SOLE_PROPRIETOR brand. STANDARD is for all other campaign use cases. Multiple campaign use cases can be created per STANDARD brand.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("brand_type")
    public String brandType;

    public MessagingV1BrandRegistrations withBrandType(String brandType) {
        this.brandType = brandType;
        return this;
    }
    
    /**
     * A2P Messaging Profile Bundle BundleSid.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_profile_bundle_sid")
    public String customerProfileBundleSid;

    public MessagingV1BrandRegistrations withCustomerProfileBundleSid(String customerProfileBundleSid) {
        this.customerProfileBundleSid = customerProfileBundleSid;
        return this;
    }
    
    /**
     * The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_created")
    public OffsetDateTime dateCreated;

    public MessagingV1BrandRegistrations withDateCreated(OffsetDateTime dateCreated) {
        this.dateCreated = dateCreated;
        return this;
    }
    
    /**
     * The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_updated")
    public OffsetDateTime dateUpdated;

    public MessagingV1BrandRegistrations withDateUpdated(OffsetDateTime dateUpdated) {
        this.dateUpdated = dateUpdated;
        return this;
    }
    
    /**
     * A reason why brand registration has failed. Only applicable when status is FAILED.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("failure_reason")
    public String failureReason;

    public MessagingV1BrandRegistrations withFailureReason(String failureReason) {
        this.failureReason = failureReason;
        return this;
    }
    
    /**
     * Identified as a government entity
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("government_entity")
    public Boolean governmentEntity;

    public MessagingV1BrandRegistrations withGovernmentEntity(Boolean governmentEntity) {
        this.governmentEntity = governmentEntity;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("identity_status")
    public BrandRegistrationsEnumIdentityStatus identityStatus;

    public MessagingV1BrandRegistrations withIdentityStatus(BrandRegistrationsEnumIdentityStatus identityStatus) {
        this.identityStatus = identityStatus;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("links")
    public MessagingV1BrandRegistrationsLinks links;

    public MessagingV1BrandRegistrations withLinks(MessagingV1BrandRegistrationsLinks links) {
        this.links = links;
        return this;
    }
    
    /**
     * A boolean that specifies whether brand should be a mock or not. If true, brand will be registered as a mock brand. Defaults to false if no value is provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mock")
    public Boolean mock;

    public MessagingV1BrandRegistrations withMock(Boolean mock) {
        this.mock = mock;
        return this;
    }
    
    /**
     * Publicly traded company identified in the Russell 3000 Index
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("russell_3000")
    public Boolean russell3000;

    public MessagingV1BrandRegistrations withRussell3000(Boolean russell3000) {
        this.russell3000 = russell3000;
        return this;
    }
    
    /**
     * The unique string to identify Brand Registration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sid")
    public String sid;

    public MessagingV1BrandRegistrations withSid(String sid) {
        this.sid = sid;
        return this;
    }
    
    /**
     * A flag to disable automatic secondary vetting for brands which it would otherwise be done.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skip_automatic_sec_vet")
    public Boolean skipAutomaticSecVet;

    public MessagingV1BrandRegistrations withSkipAutomaticSecVet(Boolean skipAutomaticSecVet) {
        this.skipAutomaticSecVet = skipAutomaticSecVet;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public BrandRegistrationsEnumStatus status;

    public MessagingV1BrandRegistrations withStatus(BrandRegistrationsEnumStatus status) {
        this.status = status;
        return this;
    }
    
    /**
     * Nonprofit organization tax-exempt status per section 501 of the U.S. tax code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_exempt_status")
    public String taxExemptStatus;

    public MessagingV1BrandRegistrations withTaxExemptStatus(String taxExemptStatus) {
        this.taxExemptStatus = taxExemptStatus;
        return this;
    }
    
    /**
     * Campaign Registry (TCR) Brand ID. Assigned only after successful brand registration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tcr_id")
    public String tcrId;

    public MessagingV1BrandRegistrations withTcrId(String tcrId) {
        this.tcrId = tcrId;
        return this;
    }
    
    /**
     * The absolute URL of the Brand Registration resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    public String url;

    public MessagingV1BrandRegistrations withUrl(String url) {
        this.url = url;
        return this;
    }
    
    public MessagingV1BrandRegistrations(){}
}
