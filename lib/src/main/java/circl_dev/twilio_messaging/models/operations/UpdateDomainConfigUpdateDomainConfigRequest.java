/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package circl_dev.twilio_messaging.models.operations;

import circl_dev.twilio_messaging.utils.SpeakeasyMetadata;


public class UpdateDomainConfigUpdateDomainConfigRequest {
    /**
     * URL to receive click events to your webhook whenever the recipients click on the shortened links
     */
    @SpeakeasyMetadata("form:name=CallbackUrl")
    public String callbackUrl;

    public UpdateDomainConfigUpdateDomainConfigRequest withCallbackUrl(String callbackUrl) {
        this.callbackUrl = callbackUrl;
        return this;
    }
    
    /**
     * Boolean field to set customer delivery preference when there is a failure in linkShortening service
     */
    @SpeakeasyMetadata("form:name=ContinueOnFailure")
    public Boolean continueOnFailure;

    public UpdateDomainConfigUpdateDomainConfigRequest withContinueOnFailure(Boolean continueOnFailure) {
        this.continueOnFailure = continueOnFailure;
        return this;
    }
    
    /**
     * Customer's choice to send links with/without "https://" attached to shortened url. If true, messages will not be sent with https:// at the beginning of the url. If false, messages will be sent with https:// at the beginning of the url. False is the default behavior if it is not specified.
     */
    @SpeakeasyMetadata("form:name=DisableHttps")
    public Boolean disableHttps;

    public UpdateDomainConfigUpdateDomainConfigRequest withDisableHttps(Boolean disableHttps) {
        this.disableHttps = disableHttps;
        return this;
    }
    
    /**
     * Any requests we receive to this domain that do not match an existing shortened message will be redirected to the fallback url. These will likely be either expired messages, random misdirected traffic, or intentional scraping.
     */
    @SpeakeasyMetadata("form:name=FallbackUrl")
    public String fallbackUrl;

    public UpdateDomainConfigUpdateDomainConfigRequest withFallbackUrl(String fallbackUrl) {
        this.fallbackUrl = fallbackUrl;
        return this;
    }
    
    public UpdateDomainConfigUpdateDomainConfigRequest(){}
}
