/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package circl_dev.twilio_messaging.models.operations;

import circl_dev.twilio_messaging.utils.SpeakeasyMetadata;
import com.fasterxml.jackson.annotation.JsonProperty;


public class CreateBrandRegistrationsCreateBrandRegistrationsRequest {
    /**
     * A2P Messaging Profile Bundle Sid.
     */
    @SpeakeasyMetadata("form:name=A2PProfileBundleSid")
    public String a2PProfileBundleSid;

    public CreateBrandRegistrationsCreateBrandRegistrationsRequest withA2PProfileBundleSid(String a2PProfileBundleSid) {
        this.a2PProfileBundleSid = a2PProfileBundleSid;
        return this;
    }
    
    /**
     * Type of brand being created. One of: "STANDARD", "SOLE_PROPRIETOR". SOLE_PROPRIETOR is for low volume, SOLE_PROPRIETOR use cases. STANDARD is for all other use cases.
     */
    @SpeakeasyMetadata("form:name=BrandType")
    public String brandType;

    public CreateBrandRegistrationsCreateBrandRegistrationsRequest withBrandType(String brandType) {
        this.brandType = brandType;
        return this;
    }
    
    /**
     * Customer Profile Bundle Sid.
     */
    @SpeakeasyMetadata("form:name=CustomerProfileBundleSid")
    public String customerProfileBundleSid;

    public CreateBrandRegistrationsCreateBrandRegistrationsRequest withCustomerProfileBundleSid(String customerProfileBundleSid) {
        this.customerProfileBundleSid = customerProfileBundleSid;
        return this;
    }
    
    /**
     * A boolean that specifies whether brand should be a mock or not. If true, brand will be registered as a mock brand. Defaults to false if no value is provided.
     */
    @SpeakeasyMetadata("form:name=Mock")
    public Boolean mock;

    public CreateBrandRegistrationsCreateBrandRegistrationsRequest withMock(Boolean mock) {
        this.mock = mock;
        return this;
    }
    
    /**
     * A flag to disable automatic secondary vetting for brands which it would otherwise be done.
     */
    @SpeakeasyMetadata("form:name=SkipAutomaticSecVet")
    public Boolean skipAutomaticSecVet;

    public CreateBrandRegistrationsCreateBrandRegistrationsRequest withSkipAutomaticSecVet(Boolean skipAutomaticSecVet) {
        this.skipAutomaticSecVet = skipAutomaticSecVet;
        return this;
    }
    
    public CreateBrandRegistrationsCreateBrandRegistrationsRequest(@JsonProperty("A2PProfileBundleSid") String a2PProfileBundleSid, @JsonProperty("CustomerProfileBundleSid") String customerProfileBundleSid) {
        this.a2PProfileBundleSid = a2PProfileBundleSid;
        this.customerProfileBundleSid = customerProfileBundleSid;
  }
}
