/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package circl_dev.twilio_messaging;

import circl_dev.twilio_messaging.utils.HTTPClient;
import circl_dev.twilio_messaging.utils.HTTPRequest;
import circl_dev.twilio_messaging.utils.JSON;
import circl_dev.twilio_messaging.utils.SerializedBody;
import circl_dev.twilio_messaging.utils.SpeakeasyHTTPClient;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;

/**
 * Twilio - Messaging: This is the public Twilio REST API.
 */
public class TwilioMessaging {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://messaging.twilio.com",
	};
    /**
	 * CREATE_ALPHA_SENDER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_ALPHA_SENDER_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * CREATE_BRAND_REGISTRATION_OTP_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_BRAND_REGISTRATION_OTP_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * CREATE_BRAND_REGISTRATIONS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_BRAND_REGISTRATIONS_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * CREATE_BRAND_VETTING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_BRAND_VETTING_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * CREATE_EXTERNAL_CAMPAIGN_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_EXTERNAL_CAMPAIGN_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * CREATE_LINKSHORTENING_MESSAGING_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_LINKSHORTENING_MESSAGING_SERVICE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * CREATE_PHONE_NUMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_PHONE_NUMBER_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * CREATE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SERVICE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * CREATE_SHORT_CODE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_SHORT_CODE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * CREATE_US_APP_TO_PERSON_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_US_APP_TO_PERSON_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * DELETE_ALPHA_SENDER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_ALPHA_SENDER_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * DELETE_DOMAIN_CERT_V4_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_DOMAIN_CERT_V4_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * DELETE_LINKSHORTENING_MESSAGING_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_LINKSHORTENING_MESSAGING_SERVICE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * DELETE_PHONE_NUMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_PHONE_NUMBER_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * DELETE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SERVICE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * DELETE_SHORT_CODE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_SHORT_CODE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * DELETE_US_APP_TO_PERSON_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_US_APP_TO_PERSON_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_ALPHA_SENDER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_ALPHA_SENDER_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_BRAND_REGISTRATIONS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_BRAND_REGISTRATIONS_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_BRAND_VETTING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_BRAND_VETTING_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_DEACTIVATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_DEACTIVATION_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_DOMAIN_CERT_V4_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_DOMAIN_CERT_V4_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_DOMAIN_CONFIG_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_DOMAIN_CONFIG_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_DOMAIN_CONFIG_MESSAGING_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_DOMAIN_CONFIG_MESSAGING_SERVICE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_LINKSHORTENING_MESSAGING_SERVICE_DOMAIN_ASSOCIATION_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_LINKSHORTENING_MESSAGING_SERVICE_DOMAIN_ASSOCIATION_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_PHONE_NUMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_PHONE_NUMBER_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SERVICE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_SHORT_CODE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_SHORT_CODE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_US_APP_TO_PERSON_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_US_APP_TO_PERSON_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_US_APP_TO_PERSON_USECASE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_US_APP_TO_PERSON_USECASE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_USECASE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_USECASE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * LIST_ALPHA_SENDER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_ALPHA_SENDER_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * LIST_BRAND_REGISTRATIONS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_BRAND_REGISTRATIONS_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * LIST_BRAND_VETTING_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_BRAND_VETTING_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * LIST_PHONE_NUMBER_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_PHONE_NUMBER_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * LIST_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SERVICE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * LIST_SHORT_CODE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_SHORT_CODE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * LIST_US_APP_TO_PERSON_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_US_APP_TO_PERSON_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * UPDATE_BRAND_REGISTRATIONS_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_BRAND_REGISTRATIONS_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * UPDATE_DOMAIN_CERT_V4_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_DOMAIN_CERT_V4_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * UPDATE_DOMAIN_CONFIG_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_DOMAIN_CONFIG_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * UPDATE_SERVICE_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] UPDATE_SERVICE_SERVERS = {
        "https://messaging.twilio.com",
    };
	
  		

	private SDKConfiguration sdkConfiguration;

	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private SDKConfiguration sdkConfiguration = new SDKConfiguration();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.sdkConfiguration.defaultClient = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.sdkConfiguration.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.sdkConfiguration.serverUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(serverUrl, params);
			return this;
		}
		
		/**
		 * Allows the overriding of the default server by index
		 * @param serverIdx The server to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerIndex(int serverIdx) {
			this.sdkConfiguration.serverIdx = serverIdx;
			this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public TwilioMessaging build() throws Exception {
			if (this.sdkConfiguration.defaultClient == null) {
				this.sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
			}
			
			if (this.sdkConfiguration.securityClient == null) {
				this.sdkConfiguration.securityClient = this.sdkConfiguration.defaultClient;
			}
			
			if (this.sdkConfiguration.serverUrl == null || this.sdkConfiguration.serverUrl.isBlank()) {
				this.sdkConfiguration.serverUrl = SERVERS[0];
				this.sdkConfiguration.serverIdx = 0;
			}

			if (this.sdkConfiguration.serverUrl.endsWith("/")) {
				this.sdkConfiguration.serverUrl = this.sdkConfiguration.serverUrl.substring(0, this.sdkConfiguration.serverUrl.length() - 1);
			}
			
			return new TwilioMessaging(this.sdkConfiguration);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private TwilioMessaging(SDKConfiguration sdkConfiguration) throws Exception {
		this.sdkConfiguration = sdkConfiguration;
	}

    public circl_dev.twilio_messaging.models.operations.CreateAlphaSenderResponse createAlphaSender(circl_dev.twilio_messaging.models.operations.CreateAlphaSenderRequest request, circl_dev.twilio_messaging.models.operations.CreateAlphaSenderSecurity security) throws Exception {
        return this.createAlphaSender(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.CreateAlphaSenderResponse createAlphaSender(circl_dev.twilio_messaging.models.operations.CreateAlphaSenderRequest request, circl_dev.twilio_messaging.models.operations.CreateAlphaSenderSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(CREATE_ALPHA_SENDER_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.CreateAlphaSenderRequest.class, baseUrl, "/v1/Services/{ServiceSid}/AlphaSenders", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = circl_dev.twilio_messaging.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.CreateAlphaSenderResponse res = new circl_dev.twilio_messaging.models.operations.CreateAlphaSenderResponse(contentType, httpRes.statusCode()) {{
            messagingV1ServiceAlphaSender = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1ServiceAlphaSender out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1ServiceAlphaSender.class);
                res.messagingV1ServiceAlphaSender = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.CreateBrandRegistrationOtpResponse createBrandRegistrationOtp(circl_dev.twilio_messaging.models.operations.CreateBrandRegistrationOtpRequest request, circl_dev.twilio_messaging.models.operations.CreateBrandRegistrationOtpSecurity security) throws Exception {
        return this.createBrandRegistrationOtp(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.CreateBrandRegistrationOtpResponse createBrandRegistrationOtp(circl_dev.twilio_messaging.models.operations.CreateBrandRegistrationOtpRequest request, circl_dev.twilio_messaging.models.operations.CreateBrandRegistrationOtpSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(CREATE_BRAND_REGISTRATION_OTP_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.CreateBrandRegistrationOtpRequest.class, baseUrl, "/v1/a2p/BrandRegistrations/{BrandRegistrationSid}/SmsOtp", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.CreateBrandRegistrationOtpResponse res = new circl_dev.twilio_messaging.models.operations.CreateBrandRegistrationOtpResponse(contentType, httpRes.statusCode()) {{
            messagingV1BrandRegistrationsBrandRegistrationOtp = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1BrandRegistrationsBrandRegistrationOtp out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1BrandRegistrationsBrandRegistrationOtp.class);
                res.messagingV1BrandRegistrationsBrandRegistrationOtp = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.CreateBrandRegistrationsResponse createBrandRegistrations(circl_dev.twilio_messaging.models.operations.CreateBrandRegistrationsCreateBrandRegistrationsRequest request, circl_dev.twilio_messaging.models.operations.CreateBrandRegistrationsSecurity security) throws Exception {
        return this.createBrandRegistrations(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.CreateBrandRegistrationsResponse createBrandRegistrations(circl_dev.twilio_messaging.models.operations.CreateBrandRegistrationsCreateBrandRegistrationsRequest request, circl_dev.twilio_messaging.models.operations.CreateBrandRegistrationsSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(CREATE_BRAND_REGISTRATIONS_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(baseUrl, "/v1/a2p/BrandRegistrations");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = circl_dev.twilio_messaging.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.CreateBrandRegistrationsResponse res = new circl_dev.twilio_messaging.models.operations.CreateBrandRegistrationsResponse(contentType, httpRes.statusCode()) {{
            messagingV1BrandRegistrations = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1BrandRegistrations out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1BrandRegistrations.class);
                res.messagingV1BrandRegistrations = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.CreateBrandVettingResponse createBrandVetting(circl_dev.twilio_messaging.models.operations.CreateBrandVettingRequest request, circl_dev.twilio_messaging.models.operations.CreateBrandVettingSecurity security) throws Exception {
        return this.createBrandVetting(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.CreateBrandVettingResponse createBrandVetting(circl_dev.twilio_messaging.models.operations.CreateBrandVettingRequest request, circl_dev.twilio_messaging.models.operations.CreateBrandVettingSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(CREATE_BRAND_VETTING_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.CreateBrandVettingRequest.class, baseUrl, "/v1/a2p/BrandRegistrations/{BrandSid}/Vettings", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = circl_dev.twilio_messaging.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.CreateBrandVettingResponse res = new circl_dev.twilio_messaging.models.operations.CreateBrandVettingResponse(contentType, httpRes.statusCode()) {{
            messagingV1BrandRegistrationsBrandVetting = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1BrandRegistrationsBrandVetting out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1BrandRegistrationsBrandVetting.class);
                res.messagingV1BrandRegistrationsBrandVetting = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.CreateExternalCampaignResponse createExternalCampaign(circl_dev.twilio_messaging.models.operations.CreateExternalCampaignCreateExternalCampaignRequest request, circl_dev.twilio_messaging.models.operations.CreateExternalCampaignSecurity security) throws Exception {
        return this.createExternalCampaign(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.CreateExternalCampaignResponse createExternalCampaign(circl_dev.twilio_messaging.models.operations.CreateExternalCampaignCreateExternalCampaignRequest request, circl_dev.twilio_messaging.models.operations.CreateExternalCampaignSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(CREATE_EXTERNAL_CAMPAIGN_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(baseUrl, "/v1/Services/PreregisteredUsa2p");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = circl_dev.twilio_messaging.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.CreateExternalCampaignResponse res = new circl_dev.twilio_messaging.models.operations.CreateExternalCampaignResponse(contentType, httpRes.statusCode()) {{
            messagingV1ExternalCampaign = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1ExternalCampaign out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1ExternalCampaign.class);
                res.messagingV1ExternalCampaign = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.CreateLinkshorteningMessagingServiceResponse createLinkshorteningMessagingService(circl_dev.twilio_messaging.models.operations.CreateLinkshorteningMessagingServiceRequest request, circl_dev.twilio_messaging.models.operations.CreateLinkshorteningMessagingServiceSecurity security) throws Exception {
        return this.createLinkshorteningMessagingService(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.CreateLinkshorteningMessagingServiceResponse createLinkshorteningMessagingService(circl_dev.twilio_messaging.models.operations.CreateLinkshorteningMessagingServiceRequest request, circl_dev.twilio_messaging.models.operations.CreateLinkshorteningMessagingServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(CREATE_LINKSHORTENING_MESSAGING_SERVICE_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.CreateLinkshorteningMessagingServiceRequest.class, baseUrl, "/v1/LinkShortening/Domains/{DomainSid}/MessagingServices/{MessagingServiceSid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.CreateLinkshorteningMessagingServiceResponse res = new circl_dev.twilio_messaging.models.operations.CreateLinkshorteningMessagingServiceResponse(contentType, httpRes.statusCode()) {{
            messagingV1LinkshorteningMessagingService = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1LinkshorteningMessagingService out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1LinkshorteningMessagingService.class);
                res.messagingV1LinkshorteningMessagingService = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.CreatePhoneNumberResponse createPhoneNumber(circl_dev.twilio_messaging.models.operations.CreatePhoneNumberRequest request, circl_dev.twilio_messaging.models.operations.CreatePhoneNumberSecurity security) throws Exception {
        return this.createPhoneNumber(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.CreatePhoneNumberResponse createPhoneNumber(circl_dev.twilio_messaging.models.operations.CreatePhoneNumberRequest request, circl_dev.twilio_messaging.models.operations.CreatePhoneNumberSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(CREATE_PHONE_NUMBER_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.CreatePhoneNumberRequest.class, baseUrl, "/v1/Services/{ServiceSid}/PhoneNumbers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = circl_dev.twilio_messaging.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.CreatePhoneNumberResponse res = new circl_dev.twilio_messaging.models.operations.CreatePhoneNumberResponse(contentType, httpRes.statusCode()) {{
            messagingV1ServicePhoneNumber = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1ServicePhoneNumber out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1ServicePhoneNumber.class);
                res.messagingV1ServicePhoneNumber = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.CreateServiceResponse createService(circl_dev.twilio_messaging.models.operations.CreateServiceCreateServiceRequest1 request, circl_dev.twilio_messaging.models.operations.CreateServiceSecurity security) throws Exception {
        return this.createService(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.CreateServiceResponse createService(circl_dev.twilio_messaging.models.operations.CreateServiceCreateServiceRequest1 request, circl_dev.twilio_messaging.models.operations.CreateServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(CREATE_SERVICE_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(baseUrl, "/v1/Services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = circl_dev.twilio_messaging.utils.Utils.serializeRequestBody(request, "request", "form");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.CreateServiceResponse res = new circl_dev.twilio_messaging.models.operations.CreateServiceResponse(contentType, httpRes.statusCode()) {{
            messagingV1Service = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1Service.class);
                res.messagingV1Service = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.CreateShortCodeResponse createShortCode(circl_dev.twilio_messaging.models.operations.CreateShortCodeRequest request, circl_dev.twilio_messaging.models.operations.CreateShortCodeSecurity security) throws Exception {
        return this.createShortCode(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.CreateShortCodeResponse createShortCode(circl_dev.twilio_messaging.models.operations.CreateShortCodeRequest request, circl_dev.twilio_messaging.models.operations.CreateShortCodeSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(CREATE_SHORT_CODE_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.CreateShortCodeRequest.class, baseUrl, "/v1/Services/{ServiceSid}/ShortCodes", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = circl_dev.twilio_messaging.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.CreateShortCodeResponse res = new circl_dev.twilio_messaging.models.operations.CreateShortCodeResponse(contentType, httpRes.statusCode()) {{
            messagingV1ServiceShortCode = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1ServiceShortCode out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1ServiceShortCode.class);
                res.messagingV1ServiceShortCode = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.CreateUsAppToPersonResponse createUsAppToPerson(circl_dev.twilio_messaging.models.operations.CreateUsAppToPersonRequest request, circl_dev.twilio_messaging.models.operations.CreateUsAppToPersonSecurity security) throws Exception {
        return this.createUsAppToPerson(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.CreateUsAppToPersonResponse createUsAppToPerson(circl_dev.twilio_messaging.models.operations.CreateUsAppToPersonRequest request, circl_dev.twilio_messaging.models.operations.CreateUsAppToPersonSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(CREATE_US_APP_TO_PERSON_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.CreateUsAppToPersonRequest.class, baseUrl, "/v1/Services/{MessagingServiceSid}/Compliance/Usa2p", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = circl_dev.twilio_messaging.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.CreateUsAppToPersonResponse res = new circl_dev.twilio_messaging.models.operations.CreateUsAppToPersonResponse(contentType, httpRes.statusCode()) {{
            messagingV1ServiceUsAppToPerson = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1ServiceUsAppToPerson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1ServiceUsAppToPerson.class);
                res.messagingV1ServiceUsAppToPerson = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.DeleteAlphaSenderResponse deleteAlphaSender(circl_dev.twilio_messaging.models.operations.DeleteAlphaSenderRequest request, circl_dev.twilio_messaging.models.operations.DeleteAlphaSenderSecurity security) throws Exception {
        return this.deleteAlphaSender(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.DeleteAlphaSenderResponse deleteAlphaSender(circl_dev.twilio_messaging.models.operations.DeleteAlphaSenderRequest request, circl_dev.twilio_messaging.models.operations.DeleteAlphaSenderSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(DELETE_ALPHA_SENDER_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.DeleteAlphaSenderRequest.class, baseUrl, "/v1/Services/{ServiceSid}/AlphaSenders/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.DeleteAlphaSenderResponse res = new circl_dev.twilio_messaging.models.operations.DeleteAlphaSenderResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.DeleteDomainCertV4Response deleteDomainCertV4(circl_dev.twilio_messaging.models.operations.DeleteDomainCertV4Request request, circl_dev.twilio_messaging.models.operations.DeleteDomainCertV4Security security) throws Exception {
        return this.deleteDomainCertV4(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.DeleteDomainCertV4Response deleteDomainCertV4(circl_dev.twilio_messaging.models.operations.DeleteDomainCertV4Request request, circl_dev.twilio_messaging.models.operations.DeleteDomainCertV4Security security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(DELETE_DOMAIN_CERT_V4_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.DeleteDomainCertV4Request.class, baseUrl, "/v1/LinkShortening/Domains/{DomainSid}/Certificate", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.DeleteDomainCertV4Response res = new circl_dev.twilio_messaging.models.operations.DeleteDomainCertV4Response(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.DeleteLinkshorteningMessagingServiceResponse deleteLinkshorteningMessagingService(circl_dev.twilio_messaging.models.operations.DeleteLinkshorteningMessagingServiceRequest request, circl_dev.twilio_messaging.models.operations.DeleteLinkshorteningMessagingServiceSecurity security) throws Exception {
        return this.deleteLinkshorteningMessagingService(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.DeleteLinkshorteningMessagingServiceResponse deleteLinkshorteningMessagingService(circl_dev.twilio_messaging.models.operations.DeleteLinkshorteningMessagingServiceRequest request, circl_dev.twilio_messaging.models.operations.DeleteLinkshorteningMessagingServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(DELETE_LINKSHORTENING_MESSAGING_SERVICE_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.DeleteLinkshorteningMessagingServiceRequest.class, baseUrl, "/v1/LinkShortening/Domains/{DomainSid}/MessagingServices/{MessagingServiceSid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.DeleteLinkshorteningMessagingServiceResponse res = new circl_dev.twilio_messaging.models.operations.DeleteLinkshorteningMessagingServiceResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.DeletePhoneNumberResponse deletePhoneNumber(circl_dev.twilio_messaging.models.operations.DeletePhoneNumberRequest request, circl_dev.twilio_messaging.models.operations.DeletePhoneNumberSecurity security) throws Exception {
        return this.deletePhoneNumber(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.DeletePhoneNumberResponse deletePhoneNumber(circl_dev.twilio_messaging.models.operations.DeletePhoneNumberRequest request, circl_dev.twilio_messaging.models.operations.DeletePhoneNumberSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(DELETE_PHONE_NUMBER_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.DeletePhoneNumberRequest.class, baseUrl, "/v1/Services/{ServiceSid}/PhoneNumbers/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.DeletePhoneNumberResponse res = new circl_dev.twilio_messaging.models.operations.DeletePhoneNumberResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.DeleteServiceResponse deleteService(circl_dev.twilio_messaging.models.operations.DeleteServiceRequest request, circl_dev.twilio_messaging.models.operations.DeleteServiceSecurity security) throws Exception {
        return this.deleteService(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.DeleteServiceResponse deleteService(circl_dev.twilio_messaging.models.operations.DeleteServiceRequest request, circl_dev.twilio_messaging.models.operations.DeleteServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(DELETE_SERVICE_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.DeleteServiceRequest.class, baseUrl, "/v1/Services/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.DeleteServiceResponse res = new circl_dev.twilio_messaging.models.operations.DeleteServiceResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.DeleteShortCodeResponse deleteShortCode(circl_dev.twilio_messaging.models.operations.DeleteShortCodeRequest request, circl_dev.twilio_messaging.models.operations.DeleteShortCodeSecurity security) throws Exception {
        return this.deleteShortCode(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.DeleteShortCodeResponse deleteShortCode(circl_dev.twilio_messaging.models.operations.DeleteShortCodeRequest request, circl_dev.twilio_messaging.models.operations.DeleteShortCodeSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(DELETE_SHORT_CODE_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.DeleteShortCodeRequest.class, baseUrl, "/v1/Services/{ServiceSid}/ShortCodes/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.DeleteShortCodeResponse res = new circl_dev.twilio_messaging.models.operations.DeleteShortCodeResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.DeleteUsAppToPersonResponse deleteUsAppToPerson(circl_dev.twilio_messaging.models.operations.DeleteUsAppToPersonRequest request, circl_dev.twilio_messaging.models.operations.DeleteUsAppToPersonSecurity security) throws Exception {
        return this.deleteUsAppToPerson(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.DeleteUsAppToPersonResponse deleteUsAppToPerson(circl_dev.twilio_messaging.models.operations.DeleteUsAppToPersonRequest request, circl_dev.twilio_messaging.models.operations.DeleteUsAppToPersonSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(DELETE_US_APP_TO_PERSON_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.DeleteUsAppToPersonRequest.class, baseUrl, "/v1/Services/{MessagingServiceSid}/Compliance/Usa2p/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.DeleteUsAppToPersonResponse res = new circl_dev.twilio_messaging.models.operations.DeleteUsAppToPersonResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.FetchAlphaSenderResponse fetchAlphaSender(circl_dev.twilio_messaging.models.operations.FetchAlphaSenderRequest request, circl_dev.twilio_messaging.models.operations.FetchAlphaSenderSecurity security) throws Exception {
        return this.fetchAlphaSender(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.FetchAlphaSenderResponse fetchAlphaSender(circl_dev.twilio_messaging.models.operations.FetchAlphaSenderRequest request, circl_dev.twilio_messaging.models.operations.FetchAlphaSenderSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(FETCH_ALPHA_SENDER_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.FetchAlphaSenderRequest.class, baseUrl, "/v1/Services/{ServiceSid}/AlphaSenders/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.FetchAlphaSenderResponse res = new circl_dev.twilio_messaging.models.operations.FetchAlphaSenderResponse(contentType, httpRes.statusCode()) {{
            messagingV1ServiceAlphaSender = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1ServiceAlphaSender out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1ServiceAlphaSender.class);
                res.messagingV1ServiceAlphaSender = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.FetchBrandRegistrationsResponse fetchBrandRegistrations(circl_dev.twilio_messaging.models.operations.FetchBrandRegistrationsRequest request, circl_dev.twilio_messaging.models.operations.FetchBrandRegistrationsSecurity security) throws Exception {
        return this.fetchBrandRegistrations(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.FetchBrandRegistrationsResponse fetchBrandRegistrations(circl_dev.twilio_messaging.models.operations.FetchBrandRegistrationsRequest request, circl_dev.twilio_messaging.models.operations.FetchBrandRegistrationsSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(FETCH_BRAND_REGISTRATIONS_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.FetchBrandRegistrationsRequest.class, baseUrl, "/v1/a2p/BrandRegistrations/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.FetchBrandRegistrationsResponse res = new circl_dev.twilio_messaging.models.operations.FetchBrandRegistrationsResponse(contentType, httpRes.statusCode()) {{
            messagingV1BrandRegistrations = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1BrandRegistrations out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1BrandRegistrations.class);
                res.messagingV1BrandRegistrations = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.FetchBrandVettingResponse fetchBrandVetting(circl_dev.twilio_messaging.models.operations.FetchBrandVettingRequest request, circl_dev.twilio_messaging.models.operations.FetchBrandVettingSecurity security) throws Exception {
        return this.fetchBrandVetting(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.FetchBrandVettingResponse fetchBrandVetting(circl_dev.twilio_messaging.models.operations.FetchBrandVettingRequest request, circl_dev.twilio_messaging.models.operations.FetchBrandVettingSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(FETCH_BRAND_VETTING_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.FetchBrandVettingRequest.class, baseUrl, "/v1/a2p/BrandRegistrations/{BrandSid}/Vettings/{BrandVettingSid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.FetchBrandVettingResponse res = new circl_dev.twilio_messaging.models.operations.FetchBrandVettingResponse(contentType, httpRes.statusCode()) {{
            messagingV1BrandRegistrationsBrandVetting = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1BrandRegistrationsBrandVetting out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1BrandRegistrationsBrandVetting.class);
                res.messagingV1BrandRegistrationsBrandVetting = out;
            }
        }

        return res;
    }

    /**
     * Fetch a list of all United States numbers that have been deactivated on a specific date.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public circl_dev.twilio_messaging.models.operations.FetchDeactivationResponse fetchDeactivation(circl_dev.twilio_messaging.models.operations.FetchDeactivationRequest request, circl_dev.twilio_messaging.models.operations.FetchDeactivationSecurity security) throws Exception {
        return this.fetchDeactivation(request, security, null);
    }

    /**
     * Fetch a list of all United States numbers that have been deactivated on a specific date.
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @param serverURL an optional server URL to use
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public circl_dev.twilio_messaging.models.operations.FetchDeactivationResponse fetchDeactivation(circl_dev.twilio_messaging.models.operations.FetchDeactivationRequest request, circl_dev.twilio_messaging.models.operations.FetchDeactivationSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(FETCH_DEACTIVATION_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(baseUrl, "/v1/Deactivations");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.List<NameValuePair> queryParams = circl_dev.twilio_messaging.utils.Utils.getQueryParams(circl_dev.twilio_messaging.models.operations.FetchDeactivationRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.FetchDeactivationResponse res = new circl_dev.twilio_messaging.models.operations.FetchDeactivationResponse(contentType, httpRes.statusCode()) {{
            messagingV1Deactivation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 307) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1Deactivation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1Deactivation.class);
                res.messagingV1Deactivation = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.FetchDomainCertV4Response fetchDomainCertV4(circl_dev.twilio_messaging.models.operations.FetchDomainCertV4Request request, circl_dev.twilio_messaging.models.operations.FetchDomainCertV4Security security) throws Exception {
        return this.fetchDomainCertV4(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.FetchDomainCertV4Response fetchDomainCertV4(circl_dev.twilio_messaging.models.operations.FetchDomainCertV4Request request, circl_dev.twilio_messaging.models.operations.FetchDomainCertV4Security security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(FETCH_DOMAIN_CERT_V4_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.FetchDomainCertV4Request.class, baseUrl, "/v1/LinkShortening/Domains/{DomainSid}/Certificate", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.FetchDomainCertV4Response res = new circl_dev.twilio_messaging.models.operations.FetchDomainCertV4Response(contentType, httpRes.statusCode()) {{
            messagingV1DomainCertV4 = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1DomainCertV4 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1DomainCertV4.class);
                res.messagingV1DomainCertV4 = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.FetchDomainConfigResponse fetchDomainConfig(circl_dev.twilio_messaging.models.operations.FetchDomainConfigRequest request, circl_dev.twilio_messaging.models.operations.FetchDomainConfigSecurity security) throws Exception {
        return this.fetchDomainConfig(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.FetchDomainConfigResponse fetchDomainConfig(circl_dev.twilio_messaging.models.operations.FetchDomainConfigRequest request, circl_dev.twilio_messaging.models.operations.FetchDomainConfigSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(FETCH_DOMAIN_CONFIG_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.FetchDomainConfigRequest.class, baseUrl, "/v1/LinkShortening/Domains/{DomainSid}/Config", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.FetchDomainConfigResponse res = new circl_dev.twilio_messaging.models.operations.FetchDomainConfigResponse(contentType, httpRes.statusCode()) {{
            messagingV1DomainConfig = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1DomainConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1DomainConfig.class);
                res.messagingV1DomainConfig = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.FetchDomainConfigMessagingServiceResponse fetchDomainConfigMessagingService(circl_dev.twilio_messaging.models.operations.FetchDomainConfigMessagingServiceRequest request, circl_dev.twilio_messaging.models.operations.FetchDomainConfigMessagingServiceSecurity security) throws Exception {
        return this.fetchDomainConfigMessagingService(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.FetchDomainConfigMessagingServiceResponse fetchDomainConfigMessagingService(circl_dev.twilio_messaging.models.operations.FetchDomainConfigMessagingServiceRequest request, circl_dev.twilio_messaging.models.operations.FetchDomainConfigMessagingServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(FETCH_DOMAIN_CONFIG_MESSAGING_SERVICE_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.FetchDomainConfigMessagingServiceRequest.class, baseUrl, "/v1/LinkShortening/MessagingService/{MessagingServiceSid}/DomainConfig", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.FetchDomainConfigMessagingServiceResponse res = new circl_dev.twilio_messaging.models.operations.FetchDomainConfigMessagingServiceResponse(contentType, httpRes.statusCode()) {{
            messagingV1DomainConfigMessagingService = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1DomainConfigMessagingService out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1DomainConfigMessagingService.class);
                res.messagingV1DomainConfigMessagingService = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.FetchLinkshorteningMessagingServiceDomainAssociationResponse fetchLinkshorteningMessagingServiceDomainAssociation(circl_dev.twilio_messaging.models.operations.FetchLinkshorteningMessagingServiceDomainAssociationRequest request, circl_dev.twilio_messaging.models.operations.FetchLinkshorteningMessagingServiceDomainAssociationSecurity security) throws Exception {
        return this.fetchLinkshorteningMessagingServiceDomainAssociation(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.FetchLinkshorteningMessagingServiceDomainAssociationResponse fetchLinkshorteningMessagingServiceDomainAssociation(circl_dev.twilio_messaging.models.operations.FetchLinkshorteningMessagingServiceDomainAssociationRequest request, circl_dev.twilio_messaging.models.operations.FetchLinkshorteningMessagingServiceDomainAssociationSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(FETCH_LINKSHORTENING_MESSAGING_SERVICE_DOMAIN_ASSOCIATION_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.FetchLinkshorteningMessagingServiceDomainAssociationRequest.class, baseUrl, "/v1/LinkShortening/MessagingServices/{MessagingServiceSid}/Domain", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.FetchLinkshorteningMessagingServiceDomainAssociationResponse res = new circl_dev.twilio_messaging.models.operations.FetchLinkshorteningMessagingServiceDomainAssociationResponse(contentType, httpRes.statusCode()) {{
            messagingV1LinkshorteningMessagingServiceDomainAssociation = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1LinkshorteningMessagingServiceDomainAssociation out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1LinkshorteningMessagingServiceDomainAssociation.class);
                res.messagingV1LinkshorteningMessagingServiceDomainAssociation = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.FetchPhoneNumberResponse fetchPhoneNumber(circl_dev.twilio_messaging.models.operations.FetchPhoneNumberRequest request, circl_dev.twilio_messaging.models.operations.FetchPhoneNumberSecurity security) throws Exception {
        return this.fetchPhoneNumber(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.FetchPhoneNumberResponse fetchPhoneNumber(circl_dev.twilio_messaging.models.operations.FetchPhoneNumberRequest request, circl_dev.twilio_messaging.models.operations.FetchPhoneNumberSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(FETCH_PHONE_NUMBER_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.FetchPhoneNumberRequest.class, baseUrl, "/v1/Services/{ServiceSid}/PhoneNumbers/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.FetchPhoneNumberResponse res = new circl_dev.twilio_messaging.models.operations.FetchPhoneNumberResponse(contentType, httpRes.statusCode()) {{
            messagingV1ServicePhoneNumber = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1ServicePhoneNumber out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1ServicePhoneNumber.class);
                res.messagingV1ServicePhoneNumber = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.FetchServiceResponse fetchService(circl_dev.twilio_messaging.models.operations.FetchServiceRequest request, circl_dev.twilio_messaging.models.operations.FetchServiceSecurity security) throws Exception {
        return this.fetchService(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.FetchServiceResponse fetchService(circl_dev.twilio_messaging.models.operations.FetchServiceRequest request, circl_dev.twilio_messaging.models.operations.FetchServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(FETCH_SERVICE_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.FetchServiceRequest.class, baseUrl, "/v1/Services/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.FetchServiceResponse res = new circl_dev.twilio_messaging.models.operations.FetchServiceResponse(contentType, httpRes.statusCode()) {{
            messagingV1Service = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1Service.class);
                res.messagingV1Service = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.FetchShortCodeResponse fetchShortCode(circl_dev.twilio_messaging.models.operations.FetchShortCodeRequest request, circl_dev.twilio_messaging.models.operations.FetchShortCodeSecurity security) throws Exception {
        return this.fetchShortCode(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.FetchShortCodeResponse fetchShortCode(circl_dev.twilio_messaging.models.operations.FetchShortCodeRequest request, circl_dev.twilio_messaging.models.operations.FetchShortCodeSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(FETCH_SHORT_CODE_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.FetchShortCodeRequest.class, baseUrl, "/v1/Services/{ServiceSid}/ShortCodes/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.FetchShortCodeResponse res = new circl_dev.twilio_messaging.models.operations.FetchShortCodeResponse(contentType, httpRes.statusCode()) {{
            messagingV1ServiceShortCode = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1ServiceShortCode out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1ServiceShortCode.class);
                res.messagingV1ServiceShortCode = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonResponse fetchUsAppToPerson(circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonRequest request, circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonSecurity security) throws Exception {
        return this.fetchUsAppToPerson(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonResponse fetchUsAppToPerson(circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonRequest request, circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(FETCH_US_APP_TO_PERSON_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonRequest.class, baseUrl, "/v1/Services/{MessagingServiceSid}/Compliance/Usa2p/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonResponse res = new circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonResponse(contentType, httpRes.statusCode()) {{
            messagingV1ServiceUsAppToPerson = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1ServiceUsAppToPerson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1ServiceUsAppToPerson.class);
                res.messagingV1ServiceUsAppToPerson = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonUsecaseResponse fetchUsAppToPersonUsecase(circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonUsecaseRequest request, circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonUsecaseSecurity security) throws Exception {
        return this.fetchUsAppToPersonUsecase(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonUsecaseResponse fetchUsAppToPersonUsecase(circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonUsecaseRequest request, circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonUsecaseSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(FETCH_US_APP_TO_PERSON_USECASE_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonUsecaseRequest.class, baseUrl, "/v1/Services/{MessagingServiceSid}/Compliance/Usa2p/Usecases", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.List<NameValuePair> queryParams = circl_dev.twilio_messaging.utils.Utils.getQueryParams(circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonUsecaseRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonUsecaseResponse res = new circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonUsecaseResponse(contentType, httpRes.statusCode()) {{
            messagingV1ServiceUsAppToPersonUsecase = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1ServiceUsAppToPersonUsecase out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1ServiceUsAppToPersonUsecase.class);
                res.messagingV1ServiceUsAppToPersonUsecase = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.FetchUsecaseResponse fetchUsecase(circl_dev.twilio_messaging.models.operations.FetchUsecaseSecurity security) throws Exception {
        return this.fetchUsecase(security, null);
    }

    public circl_dev.twilio_messaging.models.operations.FetchUsecaseResponse fetchUsecase(circl_dev.twilio_messaging.models.operations.FetchUsecaseSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(FETCH_USECASE_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(baseUrl, "/v1/Services/Usecases");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.FetchUsecaseResponse res = new circl_dev.twilio_messaging.models.operations.FetchUsecaseResponse(contentType, httpRes.statusCode()) {{
            messagingV1Usecase = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1Usecase out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1Usecase.class);
                res.messagingV1Usecase = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.ListAlphaSenderResponse listAlphaSender(circl_dev.twilio_messaging.models.operations.ListAlphaSenderRequest request, circl_dev.twilio_messaging.models.operations.ListAlphaSenderSecurity security) throws Exception {
        return this.listAlphaSender(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.ListAlphaSenderResponse listAlphaSender(circl_dev.twilio_messaging.models.operations.ListAlphaSenderRequest request, circl_dev.twilio_messaging.models.operations.ListAlphaSenderSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(LIST_ALPHA_SENDER_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.ListAlphaSenderRequest.class, baseUrl, "/v1/Services/{ServiceSid}/AlphaSenders", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.List<NameValuePair> queryParams = circl_dev.twilio_messaging.utils.Utils.getQueryParams(circl_dev.twilio_messaging.models.operations.ListAlphaSenderRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.ListAlphaSenderResponse res = new circl_dev.twilio_messaging.models.operations.ListAlphaSenderResponse(contentType, httpRes.statusCode()) {{
            listAlphaSenderResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.operations.ListAlphaSenderListAlphaSenderResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.operations.ListAlphaSenderListAlphaSenderResponse.class);
                res.listAlphaSenderResponse = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.ListBrandRegistrationsResponse listBrandRegistrations(circl_dev.twilio_messaging.models.operations.ListBrandRegistrationsRequest request, circl_dev.twilio_messaging.models.operations.ListBrandRegistrationsSecurity security) throws Exception {
        return this.listBrandRegistrations(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.ListBrandRegistrationsResponse listBrandRegistrations(circl_dev.twilio_messaging.models.operations.ListBrandRegistrationsRequest request, circl_dev.twilio_messaging.models.operations.ListBrandRegistrationsSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(LIST_BRAND_REGISTRATIONS_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(baseUrl, "/v1/a2p/BrandRegistrations");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.List<NameValuePair> queryParams = circl_dev.twilio_messaging.utils.Utils.getQueryParams(circl_dev.twilio_messaging.models.operations.ListBrandRegistrationsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.ListBrandRegistrationsResponse res = new circl_dev.twilio_messaging.models.operations.ListBrandRegistrationsResponse(contentType, httpRes.statusCode()) {{
            listBrandRegistrationsResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.operations.ListBrandRegistrationsListBrandRegistrationsResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.operations.ListBrandRegistrationsListBrandRegistrationsResponse.class);
                res.listBrandRegistrationsResponse = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.ListBrandVettingResponse listBrandVetting(circl_dev.twilio_messaging.models.operations.ListBrandVettingRequest request, circl_dev.twilio_messaging.models.operations.ListBrandVettingSecurity security) throws Exception {
        return this.listBrandVetting(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.ListBrandVettingResponse listBrandVetting(circl_dev.twilio_messaging.models.operations.ListBrandVettingRequest request, circl_dev.twilio_messaging.models.operations.ListBrandVettingSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(LIST_BRAND_VETTING_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.ListBrandVettingRequest.class, baseUrl, "/v1/a2p/BrandRegistrations/{BrandSid}/Vettings", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.List<NameValuePair> queryParams = circl_dev.twilio_messaging.utils.Utils.getQueryParams(circl_dev.twilio_messaging.models.operations.ListBrandVettingRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.ListBrandVettingResponse res = new circl_dev.twilio_messaging.models.operations.ListBrandVettingResponse(contentType, httpRes.statusCode()) {{
            listBrandVettingResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.operations.ListBrandVettingListBrandVettingResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.operations.ListBrandVettingListBrandVettingResponse.class);
                res.listBrandVettingResponse = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.ListPhoneNumberResponse listPhoneNumber(circl_dev.twilio_messaging.models.operations.ListPhoneNumberRequest request, circl_dev.twilio_messaging.models.operations.ListPhoneNumberSecurity security) throws Exception {
        return this.listPhoneNumber(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.ListPhoneNumberResponse listPhoneNumber(circl_dev.twilio_messaging.models.operations.ListPhoneNumberRequest request, circl_dev.twilio_messaging.models.operations.ListPhoneNumberSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(LIST_PHONE_NUMBER_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.ListPhoneNumberRequest.class, baseUrl, "/v1/Services/{ServiceSid}/PhoneNumbers", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.List<NameValuePair> queryParams = circl_dev.twilio_messaging.utils.Utils.getQueryParams(circl_dev.twilio_messaging.models.operations.ListPhoneNumberRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.ListPhoneNumberResponse res = new circl_dev.twilio_messaging.models.operations.ListPhoneNumberResponse(contentType, httpRes.statusCode()) {{
            listPhoneNumberResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.operations.ListPhoneNumberListPhoneNumberResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.operations.ListPhoneNumberListPhoneNumberResponse.class);
                res.listPhoneNumberResponse = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.ListServiceResponse listService(circl_dev.twilio_messaging.models.operations.ListServiceRequest request, circl_dev.twilio_messaging.models.operations.ListServiceSecurity security) throws Exception {
        return this.listService(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.ListServiceResponse listService(circl_dev.twilio_messaging.models.operations.ListServiceRequest request, circl_dev.twilio_messaging.models.operations.ListServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(LIST_SERVICE_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(baseUrl, "/v1/Services");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.List<NameValuePair> queryParams = circl_dev.twilio_messaging.utils.Utils.getQueryParams(circl_dev.twilio_messaging.models.operations.ListServiceRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.ListServiceResponse res = new circl_dev.twilio_messaging.models.operations.ListServiceResponse(contentType, httpRes.statusCode()) {{
            listServiceResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.operations.ListServiceListServiceResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.operations.ListServiceListServiceResponse.class);
                res.listServiceResponse = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.ListShortCodeResponse listShortCode(circl_dev.twilio_messaging.models.operations.ListShortCodeRequest request, circl_dev.twilio_messaging.models.operations.ListShortCodeSecurity security) throws Exception {
        return this.listShortCode(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.ListShortCodeResponse listShortCode(circl_dev.twilio_messaging.models.operations.ListShortCodeRequest request, circl_dev.twilio_messaging.models.operations.ListShortCodeSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(LIST_SHORT_CODE_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.ListShortCodeRequest.class, baseUrl, "/v1/Services/{ServiceSid}/ShortCodes", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.List<NameValuePair> queryParams = circl_dev.twilio_messaging.utils.Utils.getQueryParams(circl_dev.twilio_messaging.models.operations.ListShortCodeRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.ListShortCodeResponse res = new circl_dev.twilio_messaging.models.operations.ListShortCodeResponse(contentType, httpRes.statusCode()) {{
            listShortCodeResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.operations.ListShortCodeListShortCodeResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.operations.ListShortCodeListShortCodeResponse.class);
                res.listShortCodeResponse = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.ListUsAppToPersonResponse listUsAppToPerson(circl_dev.twilio_messaging.models.operations.ListUsAppToPersonRequest request, circl_dev.twilio_messaging.models.operations.ListUsAppToPersonSecurity security) throws Exception {
        return this.listUsAppToPerson(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.ListUsAppToPersonResponse listUsAppToPerson(circl_dev.twilio_messaging.models.operations.ListUsAppToPersonRequest request, circl_dev.twilio_messaging.models.operations.ListUsAppToPersonSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(LIST_US_APP_TO_PERSON_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.ListUsAppToPersonRequest.class, baseUrl, "/v1/Services/{MessagingServiceSid}/Compliance/Usa2p", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.List<NameValuePair> queryParams = circl_dev.twilio_messaging.utils.Utils.getQueryParams(circl_dev.twilio_messaging.models.operations.ListUsAppToPersonRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.ListUsAppToPersonResponse res = new circl_dev.twilio_messaging.models.operations.ListUsAppToPersonResponse(contentType, httpRes.statusCode()) {{
            listUsAppToPersonResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.operations.ListUsAppToPersonListUsAppToPersonResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.operations.ListUsAppToPersonListUsAppToPersonResponse.class);
                res.listUsAppToPersonResponse = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.UpdateBrandRegistrationsResponse updateBrandRegistrations(circl_dev.twilio_messaging.models.operations.UpdateBrandRegistrationsRequest request, circl_dev.twilio_messaging.models.operations.UpdateBrandRegistrationsSecurity security) throws Exception {
        return this.updateBrandRegistrations(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.UpdateBrandRegistrationsResponse updateBrandRegistrations(circl_dev.twilio_messaging.models.operations.UpdateBrandRegistrationsRequest request, circl_dev.twilio_messaging.models.operations.UpdateBrandRegistrationsSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(UPDATE_BRAND_REGISTRATIONS_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.UpdateBrandRegistrationsRequest.class, baseUrl, "/v1/a2p/BrandRegistrations/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.UpdateBrandRegistrationsResponse res = new circl_dev.twilio_messaging.models.operations.UpdateBrandRegistrationsResponse(contentType, httpRes.statusCode()) {{
            messagingV1BrandRegistrations = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 202) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1BrandRegistrations out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1BrandRegistrations.class);
                res.messagingV1BrandRegistrations = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.UpdateDomainCertV4Response updateDomainCertV4(circl_dev.twilio_messaging.models.operations.UpdateDomainCertV4Request request, circl_dev.twilio_messaging.models.operations.UpdateDomainCertV4Security security) throws Exception {
        return this.updateDomainCertV4(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.UpdateDomainCertV4Response updateDomainCertV4(circl_dev.twilio_messaging.models.operations.UpdateDomainCertV4Request request, circl_dev.twilio_messaging.models.operations.UpdateDomainCertV4Security security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(UPDATE_DOMAIN_CERT_V4_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.UpdateDomainCertV4Request.class, baseUrl, "/v1/LinkShortening/Domains/{DomainSid}/Certificate", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = circl_dev.twilio_messaging.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.UpdateDomainCertV4Response res = new circl_dev.twilio_messaging.models.operations.UpdateDomainCertV4Response(contentType, httpRes.statusCode()) {{
            messagingV1DomainCertV4 = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 201) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1DomainCertV4 out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1DomainCertV4.class);
                res.messagingV1DomainCertV4 = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.UpdateDomainConfigResponse updateDomainConfig(circl_dev.twilio_messaging.models.operations.UpdateDomainConfigRequest request, circl_dev.twilio_messaging.models.operations.UpdateDomainConfigSecurity security) throws Exception {
        return this.updateDomainConfig(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.UpdateDomainConfigResponse updateDomainConfig(circl_dev.twilio_messaging.models.operations.UpdateDomainConfigRequest request, circl_dev.twilio_messaging.models.operations.UpdateDomainConfigSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(UPDATE_DOMAIN_CONFIG_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.UpdateDomainConfigRequest.class, baseUrl, "/v1/LinkShortening/Domains/{DomainSid}/Config", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = circl_dev.twilio_messaging.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.UpdateDomainConfigResponse res = new circl_dev.twilio_messaging.models.operations.UpdateDomainConfigResponse(contentType, httpRes.statusCode()) {{
            messagingV1DomainConfig = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 201) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1DomainConfig out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1DomainConfig.class);
                res.messagingV1DomainConfig = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.UpdateServiceResponse updateService(circl_dev.twilio_messaging.models.operations.UpdateServiceRequest request, circl_dev.twilio_messaging.models.operations.UpdateServiceSecurity security) throws Exception {
        return this.updateService(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.UpdateServiceResponse updateService(circl_dev.twilio_messaging.models.operations.UpdateServiceRequest request, circl_dev.twilio_messaging.models.operations.UpdateServiceSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(UPDATE_SERVICE_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.UpdateServiceRequest.class, baseUrl, "/v1/Services/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = circl_dev.twilio_messaging.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.UpdateServiceResponse res = new circl_dev.twilio_messaging.models.operations.UpdateServiceResponse(contentType, httpRes.statusCode()) {{
            messagingV1Service = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1Service out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1Service.class);
                res.messagingV1Service = out;
            }
        }

        return res;
    }
}