/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package circl_dev.twilio_messaging;

import circl_dev.twilio_messaging.utils.HTTPClient;
import circl_dev.twilio_messaging.utils.HTTPRequest;
import circl_dev.twilio_messaging.utils.JSON;
import circl_dev.twilio_messaging.utils.SerializedBody;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;

public class MessagingV1UsAppToPerson {
	
    /**
	 * CREATE_US_APP_TO_PERSON_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] CREATE_US_APP_TO_PERSON_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * DELETE_US_APP_TO_PERSON_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] DELETE_US_APP_TO_PERSON_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * FETCH_US_APP_TO_PERSON_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] FETCH_US_APP_TO_PERSON_SERVERS = {
        "https://messaging.twilio.com",
    };
	
    /**
	 * LIST_US_APP_TO_PERSON_SERVERS contains the list of server urls available to the SDK.
	 */
    public static final String[] LIST_US_APP_TO_PERSON_SERVERS = {
        "https://messaging.twilio.com",
    };
	
	private SDKConfiguration sdkConfiguration;

	public MessagingV1UsAppToPerson(SDKConfiguration sdkConfiguration) {
		this.sdkConfiguration = sdkConfiguration;
	}

    public circl_dev.twilio_messaging.models.operations.CreateUsAppToPersonResponse createUsAppToPerson(circl_dev.twilio_messaging.models.operations.CreateUsAppToPersonRequest request, circl_dev.twilio_messaging.models.operations.CreateUsAppToPersonSecurity security) throws Exception {
        return this.createUsAppToPerson(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.CreateUsAppToPersonResponse createUsAppToPerson(circl_dev.twilio_messaging.models.operations.CreateUsAppToPersonRequest request, circl_dev.twilio_messaging.models.operations.CreateUsAppToPersonSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(CREATE_US_APP_TO_PERSON_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.CreateUsAppToPersonRequest.class, baseUrl, "/v1/Services/{MessagingServiceSid}/Compliance/Usa2p", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = circl_dev.twilio_messaging.utils.Utils.serializeRequestBody(request, "requestBody", "form");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.CreateUsAppToPersonResponse res = new circl_dev.twilio_messaging.models.operations.CreateUsAppToPersonResponse(contentType, httpRes.statusCode()) {{
            messagingV1ServiceUsAppToPerson = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 201) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1ServiceUsAppToPerson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1ServiceUsAppToPerson.class);
                res.messagingV1ServiceUsAppToPerson = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.DeleteUsAppToPersonResponse deleteUsAppToPerson(circl_dev.twilio_messaging.models.operations.DeleteUsAppToPersonRequest request, circl_dev.twilio_messaging.models.operations.DeleteUsAppToPersonSecurity security) throws Exception {
        return this.deleteUsAppToPerson(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.DeleteUsAppToPersonResponse deleteUsAppToPerson(circl_dev.twilio_messaging.models.operations.DeleteUsAppToPersonRequest request, circl_dev.twilio_messaging.models.operations.DeleteUsAppToPersonSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(DELETE_US_APP_TO_PERSON_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.DeleteUsAppToPersonRequest.class, baseUrl, "/v1/Services/{MessagingServiceSid}/Compliance/Usa2p/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.DeleteUsAppToPersonResponse res = new circl_dev.twilio_messaging.models.operations.DeleteUsAppToPersonResponse(contentType, httpRes.statusCode()) {{
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 204) {
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonResponse fetchUsAppToPerson(circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonRequest request, circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonSecurity security) throws Exception {
        return this.fetchUsAppToPerson(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonResponse fetchUsAppToPerson(circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonRequest request, circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(FETCH_US_APP_TO_PERSON_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonRequest.class, baseUrl, "/v1/Services/{MessagingServiceSid}/Compliance/Usa2p/{Sid}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonResponse res = new circl_dev.twilio_messaging.models.operations.FetchUsAppToPersonResponse(contentType, httpRes.statusCode()) {{
            messagingV1ServiceUsAppToPerson = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.shared.MessagingV1ServiceUsAppToPerson out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.shared.MessagingV1ServiceUsAppToPerson.class);
                res.messagingV1ServiceUsAppToPerson = out;
            }
        }

        return res;
    }

    public circl_dev.twilio_messaging.models.operations.ListUsAppToPersonResponse listUsAppToPerson(circl_dev.twilio_messaging.models.operations.ListUsAppToPersonRequest request, circl_dev.twilio_messaging.models.operations.ListUsAppToPersonSecurity security) throws Exception {
        return this.listUsAppToPerson(request, security, null);
    }

    public circl_dev.twilio_messaging.models.operations.ListUsAppToPersonResponse listUsAppToPerson(circl_dev.twilio_messaging.models.operations.ListUsAppToPersonRequest request, circl_dev.twilio_messaging.models.operations.ListUsAppToPersonSecurity security, String serverURL) throws Exception {
        String baseUrl = circl_dev.twilio_messaging.utils.Utils.templateUrl(LIST_US_APP_TO_PERSON_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL != null && !serverURL.isBlank()) {
            baseUrl = serverURL;
        }
        
        String url = circl_dev.twilio_messaging.utils.Utils.generateURL(circl_dev.twilio_messaging.models.operations.ListUsAppToPersonRequest.class, baseUrl, "/v1/Services/{MessagingServiceSid}/Compliance/Usa2p", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        java.util.List<NameValuePair> queryParams = circl_dev.twilio_messaging.utils.Utils.getQueryParams(circl_dev.twilio_messaging.models.operations.ListUsAppToPersonRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = circl_dev.twilio_messaging.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        circl_dev.twilio_messaging.models.operations.ListUsAppToPersonResponse res = new circl_dev.twilio_messaging.models.operations.ListUsAppToPersonResponse(contentType, httpRes.statusCode()) {{
            listUsAppToPersonResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (circl_dev.twilio_messaging.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                circl_dev.twilio_messaging.models.operations.ListUsAppToPersonListUsAppToPersonResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), circl_dev.twilio_messaging.models.operations.ListUsAppToPersonListUsAppToPersonResponse.class);
                res.listUsAppToPersonResponse = out;
            }
        }

        return res;
    }
}